<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Authentication on </title>
    <link>https://nenadlazic.github.io/tags/authentication/</link>
    <description>Recent content in Authentication on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://nenadlazic.github.io/tags/authentication/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to expose Active Directory attributes in Keycloak tokens</title>
      <link>https://nenadlazic.github.io/blog/keycloak-custom-claims-from-ad-users/</link>
      <pubDate>Mon, 18 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://nenadlazic.github.io/blog/keycloak-custom-claims-from-ad-users/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In modern enterprises, &lt;strong&gt;centralized user directories&lt;/strong&gt; are the backbone of identity management. Whether it’s Active Directory (AD) in large corporations or an LDAP server in smaller setups, the goal is simple: a single source of truth for user identities, used across networks and applications.&lt;/p&gt;&#xA;&lt;p&gt;However, AD by itself is not a full IAM solution. This is where Keycloak comes into play: it acts as a layer that allows applications to leverage these identities for authentication and access management, while also providing the flexibility to enrich tokens with custom attributes from AD.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Authentication vs Authorization Explained</title>
      <link>https://nenadlazic.github.io/blog/authentication-vs-authorization/</link>
      <pubDate>Fri, 11 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://nenadlazic.github.io/blog/authentication-vs-authorization/</guid>
      <description>&lt;h2 id=&#34;introduction--why-this-matters&#34;&gt;Introduction – Why This Matters&lt;/h2&gt;&#xA;&lt;p&gt;Security is one of the most critical aspects of backend development, yet the concepts of authentication and authorization are often confused or mixed up. No matter if you&amp;rsquo;re building a web application, a REST API, or a distributed microservices system, it&amp;rsquo;s essential to know &lt;strong&gt;who the user is&lt;/strong&gt; and &lt;strong&gt;what they&amp;rsquo;re allowed to do&lt;/strong&gt;. This blog post will explain these two fundamental concepts in plain terms, outline how they work together, and offer best practices every backend developer should follow to build secure applications.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
